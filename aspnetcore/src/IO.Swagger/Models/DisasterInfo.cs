/*
 * agmet_mobile_version_update 
 *
 * version update
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 해당 작목의 생육단계의 재해정보 |   0 -  추정시기 아님 |   1 - 안전 |   2 - 주의 |   3 - 경보를 뜻함 
    /// </summary>
    [DataContract]
    public partial class DisasterInfo : IEquatable<DisasterInfo>
    { 
        /// <summary>
        /// 재해가 발생한 날짜
        /// </summary>
        /// <value>재해가 발생한 날짜</value>
        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// 수해
        /// </summary>
        /// <value>수해</value>
        [DataMember(Name="water")]
        public int? Water { get; set; }

        /// <summary>
        /// 저온해
        /// </summary>
        /// <value>저온해</value>
        [DataMember(Name="lt")]
        public int? Lt { get; set; }

        /// <summary>
        /// 풍해
        /// </summary>
        /// <value>풍해</value>
        [DataMember(Name="wind")]
        public int? Wind { get; set; }

        /// <summary>
        /// 동해
        /// </summary>
        /// <value>동해</value>
        [DataMember(Name="freeze")]
        public int? Freeze { get; set; }

        /// <summary>
        /// 고온해
        /// </summary>
        /// <value>고온해</value>
        [DataMember(Name="ht")]
        public int? Ht { get; set; }

        /// <summary>
        /// 일소
        /// </summary>
        /// <value>일소</value>
        [DataMember(Name="burn")]
        public int? Burn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisasterInfo {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Water: ").Append(Water).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Wind: ").Append(Wind).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Ht: ").Append(Ht).Append("\n");
            sb.Append("  Burn: ").Append(Burn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DisasterInfo)obj);
        }

        /// <summary>
        /// Returns true if DisasterInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DisasterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisasterInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Water == other.Water ||
                    Water != null &&
                    Water.Equals(other.Water)
                ) && 
                (
                    Lt == other.Lt ||
                    Lt != null &&
                    Lt.Equals(other.Lt)
                ) && 
                (
                    Wind == other.Wind ||
                    Wind != null &&
                    Wind.Equals(other.Wind)
                ) && 
                (
                    Freeze == other.Freeze ||
                    Freeze != null &&
                    Freeze.Equals(other.Freeze)
                ) && 
                (
                    Ht == other.Ht ||
                    Ht != null &&
                    Ht.Equals(other.Ht)
                ) && 
                (
                    Burn == other.Burn ||
                    Burn != null &&
                    Burn.Equals(other.Burn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Water != null)
                    hashCode = hashCode * 59 + Water.GetHashCode();
                    if (Lt != null)
                    hashCode = hashCode * 59 + Lt.GetHashCode();
                    if (Wind != null)
                    hashCode = hashCode * 59 + Wind.GetHashCode();
                    if (Freeze != null)
                    hashCode = hashCode * 59 + Freeze.GetHashCode();
                    if (Ht != null)
                    hashCode = hashCode * 59 + Ht.GetHashCode();
                    if (Burn != null)
                    hashCode = hashCode * 59 + Burn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DisasterInfo left, DisasterInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DisasterInfo left, DisasterInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
