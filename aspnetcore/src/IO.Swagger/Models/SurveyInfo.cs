/*
 * agmet_mobile_version_update 
 *
 * version update
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 설문조사 내용
    /// </summary>
    [DataContract]
    public partial class SurveyInfo : IEquatable<SurveyInfo>
    { 
        /// <summary>
        /// farmId 로 조회한 농가 정보
        /// </summary>
        /// <value>farmId 로 조회한 농가 정보</value>
        [DataMember(Name="farmInfo")]
        public List<InitData> FarmInfo { get; set; }

        /// <summary>
        /// 재해가 발생한 날짜
        /// </summary>
        /// <value>재해가 발생한 날짜</value>
        [DataMember(Name="content")]
        public List<SurveyContent> Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurveyInfo {\n");
            sb.Append("  FarmInfo: ").Append(FarmInfo).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SurveyInfo)obj);
        }

        /// <summary>
        /// Returns true if SurveyInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SurveyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurveyInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FarmInfo == other.FarmInfo ||
                    FarmInfo != null &&
                    FarmInfo.SequenceEqual(other.FarmInfo)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.SequenceEqual(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FarmInfo != null)
                    hashCode = hashCode * 59 + FarmInfo.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SurveyInfo left, SurveyInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SurveyInfo left, SurveyInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
